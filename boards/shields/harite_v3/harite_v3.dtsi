#include <dt-bindings/zmk/matrix_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>

/ {
    kscan0: kscan_composite {
        compatible = "zmk,kscan-composite";
        rows = <5>;
        columns = <6>;

        // Include the matrix driver
        matrix {
            kscan = <&kscan1>;
        };

        // Include the direct GPIO driver...
        direct {
            kscan = <&kscan2>;
            row-offset = <4>; // ...and shift it to not overlap
        };
    };

    kscan1: kscan_matrix {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;

        row-gpios
            = <&xiao_d 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;

        col-gpios
            = <&gpio0 15 GPIO_ACTIVE_HIGH>
            , <&gpio0 19 GPIO_ACTIVE_HIGH>
            , <&gpio1 1 GPIO_ACTIVE_HIGH>
            , <&gpio1 3 GPIO_ACTIVE_HIGH>
            , <&gpio1 5 GPIO_ACTIVE_HIGH>
            , <&gpio1 7 GPIO_ACTIVE_HIGH>
            ;
    };

    kscan2: kscan_direct {
        compatible = "zmk,kscan-gpio-direct";
        wakeup-source;
        input-gpios
            = <&xiao_d 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            ;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <24>;
        rows = <10>;
        map = <
                RC(0,0)                 RC(0,1)                 RC(0,2)                 RC(0,3)                  RC(0,9)                  RC(0,8)                 RC(0,7)                 RC(0,6)
        RC(1,0)         RC(3,0) RC(1,1)         RC(3,1) RC(1,2)         RC(3,2) RC(1,3)         RC(3,3) RC(1,9)           RC(3,9) RC(1,8)         RC(3,8) RC(1,7)         RC(3,7) RC(1,6)         RC(3,6)
                RC(2,0)                 RC(2,1)                 RC(2,2)                 RC(2,3)                  RC(2,9)                  RC(2,8)                 RC(2,7)                 RC(2,6)
                                                                                        RC(0,4)                  RC(0,10)
                                                                                RC(1,4)         RC(3,4) RC(1,10)          RC(3,10)
                                                                                        RC(2,4)                  RC(2,10)
                                                                                        RC(0,5)                  RC(0,11)
                                                                                RC(1,5)         RC(3,5) RC(1,11)          RC(3,11)
                                                                                        RC(2,5)                  RC(2,11)
        RC(4,0)
        >;
    };
    physical_layout0: physical_layout_0 { // First physical layout, use different naming for other layouts
        compatible = "zmk,physical-layout";
        display-name = "Default Layout";
        kscan = <&kscan0>; // Label of the kscan node, optional if all layouts use the same
        transform = <&default_transform>; // Label of the matrix transform for this layout
    };

    chosen {
        zmk,physical-layout = &physical_layout0;
        // Other chosen items
    };
    
	anin0: analog_input_0 {
		compatible = "zmk,analog-input";
		sampling-hz = <100>;
		x-ch {
			io-channels = <&adc 2>;
			mv-mid = <1667>;
			mv-min-max = <3738>; /* 30 - 3768 */
			mv-deadzone = <300>;
			scale-multiplier = <1>;
			scale-divisor = <1000>;
			invert;
			evt-type = <INPUT_EV_REL>;
			input-code = <INPUT_REL_X>;
		};
		y-ch {
			io-channels = <&adc 3>;
			mv-mid = <2055>;
			mv-min-max = <3718>; /* 3758 - 40 */
			mv-deadzone = <300>;
			scale-multiplier = <1>;
			scale-divisor = <1000>;
			/* invert; */
			evt-type = <INPUT_EV_REL>;
			input-code = <INPUT_REL_Y>;

			/* enable report mdoe for gamepad axix or knob */
/* to only call input_report on quantquantized value is updated */
	    /* report-on-change-only; */

		};
	};

    analog_input_listener {
        status = "okay";
        compatible = "zmk,input-listener";
        device = <&anin0>;
        input-processors = <&zip_xy_to_scroll_mapper>;
    };
};

/* &uart0 { */
/* 	status = "disabled"; */
/* }; */

&adc {
	status = "okay";
};


&qspi {
	status = "disabled";
};

