#include <dt-bindings/zmk/matrix_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>
#include "harite_v3-layouts.dtsi"

/ {

    kscan0: kscan_matrix {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;

        row-gpios
            = <&xiao_d 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;

        col-gpios
            = <&gpio0 15 GPIO_ACTIVE_HIGH>
            , <&gpio0 19 GPIO_ACTIVE_HIGH>
            , <&gpio1 1 GPIO_ACTIVE_HIGH>
            , <&gpio1 3 GPIO_ACTIVE_HIGH>
            , <&gpio1 5 GPIO_ACTIVE_HIGH>
            , <&gpio1 7 GPIO_ACTIVE_HIGH>
            ;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <24>;
        rows = <9>;
        map = <
                RC(0,0)                 RC(0,1)                 RC(0,2)                 RC(0,3)                  RC(0,9)                  RC(0,8)                 RC(0,7)                 RC(0,6)
        RC(1,0)         RC(3,0) RC(1,1)         RC(3,1) RC(1,2)         RC(3,2) RC(1,3)         RC(3,3) RC(1,9)           RC(3,9) RC(1,8)         RC(3,8) RC(1,7)         RC(3,7) RC(1,6)         RC(3,6)
                RC(2,0)                 RC(2,1)                 RC(2,2)                 RC(2,3)                  RC(2,9)                  RC(2,8)                 RC(2,7)                 RC(2,6)
                                                                                        RC(1,5)                  RC(3,10)
                                                                                RC(2,5)         RC(0,5) RC(0,10)          RC(2,10)
                                                                                        RC(3,5)                  RC(1,10)
                                                                                        RC(1,4)                  RC(3,11)
                                                                                RC(2,4)         RC(0,4) RC(0,11)          RC(2,11)
                                                                                        RC(3,4)                  RC(1,11)
        >;
    };

    split_inputs {
        #address-cells = <1>;
        #size-cells = <0>;

        glidepoint_split: glidepoint_split@0 {
            compatible = "zmk,input-split";
            reg = <0>;
        };
    };

    glidepoint_split_listener: glidepoint_split_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
        device = <&glidepoint_split>;
    };

    glidepoint_listener: glidepoint_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
        device = <&glidepoint>;
    };
};

&xiao_serial { status = "okay"; };

&pinctrl {
    /* Cirque Trackpad */
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 15)>,
                    <NRF_PSEL(SPIM_MISO, 1, 14)>;
        };
    };
    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 15)>,
                    <NRF_PSEL(SPIM_MISO, 1, 14)>;
            low-power-enable;
        };
    };
    /* PMW3610 */
    spi1_default: spi1_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 14)>,
                    <NRF_PSEL(SPIM_MISO, 1, 14)>;
        };
    };
    spi1_sleep: spi1_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 14)>,
                    <NRF_PSEL(SPIM_MISO, 1, 14)>;
            low-power-enable;
        };
    };
};

/* Cirque Trackpad */
&spi0 {
    status = "disabled";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&xiao_d 4 GPIO_ACTIVE_LOW>;
    glidepoint: glidepoint@0 {
        status = "disabled";
        compatible = "cirque,pinnacle";
        reg = <0>;
        spi-max-frequency = <1000000>;
        dr-gpios = <&xiao_d 5 (GPIO_ACTIVE_HIGH)>;
        y-invert;
        rotate-90;

        /* Setting a higher sensitivity causes issues on bluetooth */
        sensitivity = "1x";
        no-taps;
        no-secondary-tap;
    };
};

/* PMW3610 */
&spi1 {
    status = "disabled";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi1_default>;
    pinctrl-1 = <&spi1_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&xiao_d 4 GPIO_ACTIVE_LOW>;
    trackball: trackball@0 {
        status = "disabled";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&xiao_d 5 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        cpi = <800>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;

        force-awake;
        /* keep the sensor awake while ZMK activity state is ACTIVE,
           fallback to normal downshift mode after ZMK goes into IDLE / SLEEP mode.
           thus, the sensor would be a `wakeup-source` */
    };
};

/* &uicr { */
/*     nfct-pins-as-gpios; */
/* }; */
&qspi {
	status = "disabled";
};
